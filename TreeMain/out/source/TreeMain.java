/* autogenerated by Processing revision 1282 on 2022-05-19 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class TreeMain extends PApplet {

Tree fir;

 public void setup() {
  /* size commented out by preprocessor */;

  fir = new Tree(width / 2, 20, 10);
  fir.display();
}
class Tree{
  private TreeNode root;
  private int totalLevels;

  public Tree(int x, int y, int numLevels){
    totalLevels = numLevels;
    root = makeTree(x, y, numLevels);
  }

  public TreeNode makeTree(int x, int y, int numLevels){
    if(numLevels <= 0) return null;
    TreeNode root = new TreeNode(x, y);
    root.setLeft(makeTree(x - PApplet.parseInt(width / (pow(2, (totalLevels - numLevels) +2))), min(y + 20 * numLevels, y+50), numLevels - 1));
    root.setRight(makeTree(x + PApplet.parseInt(width / (pow(2, (totalLevels - numLevels) +2))), min(y + 20 * numLevels, y+50), numLevels - 1));
    return root;
  }

  public void display(){
    recursiveDisplay(root);
  }

  private void recursiveDisplay(TreeNode root){
    if(root == null) return;
    root.display();
    recursiveDisplay(root.getLeft());
    recursiveDisplay(root.getRight());
  }
}
class TreeNode {
  private PVector pos;
  private float psize; //diameter
  private int fillCol = color(255);
  private final int col_left = color(240,0,0);
  private final int col_right = color(50,250,50);
  private String name;
  private TreeNode left, right;
  
  public TreeNode(int x, int y) {
    pos = new PVector(x,y);
    psize = 20;
  }

  public PVector getPos(){
    return pos;
  }

  public TreeNode getLeft(){
    return left;
  }

  public TreeNode getRight(){
    return right;
  }

  public void setLeft(TreeNode left){
    this.left = left;
  }

  public void setRight(TreeNode right){
    this.right = right;
  }

  public void setPos(PVector pos){
    this.pos = pos;
  }
 
  public void display() {
    stroke(0);
    fill(fillCol);
    circle(pos.x, pos.y, psize);
    //draw lines to left and right
    float OFFSET = 3;
    if (left != null) {
      stroke(col_left);
      line(pos.x - OFFSET, pos.y - 0, left.pos.x - OFFSET, left.pos.y - 0);
    }
    if (right != null) {
      stroke(col_right);
      line(pos.x + OFFSET, pos.y + 0, right.pos.x + OFFSET, right.pos.y + 0);
    }
  }
}


  public void settings() { size(800, 500); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "TreeMain" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
