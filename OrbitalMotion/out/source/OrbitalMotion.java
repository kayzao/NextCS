/* autogenerated by Processing revision 1282 on 2022-04-26 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class OrbitalMotion extends PApplet {

//Constants
float GRAVITY = 0.1f;

Orb orb1, orb2;
PVector g;

boolean moving;

 public void setup() {
  /* size commented out by preprocessor */;
  g = new PVector(0, GRAVITY);
  println("================================================================================");
  println("SPACE to enable/disable movement, H to apply a force to the ball, and R to reset");
  println("================================================================================");
  reset();
}

 public void reset() {
  moving = false;
  orb1 = new Orb(width / 2, height / 2);
  orb2 = new Orb(PApplet.parseInt(orb1.getX()), PApplet.parseInt(orb1.getY()) + 100);
  orb2.setColor(color(255));
  orb1.setColor(color(50, 175, 255));
  orb1.drawVector(false);
}


 public void draw() {
  background(255);
  fill(255);
  strokeWeight(1);
  if (moving) {
    runAStep();
  }
  orb1.display();
  orb2.display();
  strokeWeight(1);
  fill(255, 0, 0); 
  rect(orb1.getX() + 20, orb1.getY(), 10, orb2.SPRING_LENGTH);
  rect(orb1.getX() + 20, orb1.getY() - orb2.SPRING_LENGTH, 10, orb2.SPRING_LENGTH);
}

 public void runAStep() {
  orb2.applyForce(g);
  orb2.applyForce(orb2.calculateSpringForceY(orb1));
  orb2.run();
}

 public void keyPressed() {
  if (key == ' ') {
    moving = !moving;
  }
  
  if (key == 'h') {
    orb2.applyForce(new PVector(0, -6));
    moving = true;
  }

  if (key == 'r') {
    reset();
  }
}
class Orb {
  private PVector pos; //position
  private PVector vel; //velocity
  private PVector nextAccel; //acceleration for the next tick
  private float psize;
  private int orbColor;
  private boolean drawVector;
  static final float SPRING_LENGTH = 100;
  static final float SPRING_CONST = 0.005f;
  static final float AIR_DAMPING = 0.995f;
  static final float VECTOR_SIZE = 3;

  public Orb(int x, int y){
    if(psize == 0) psize = 20;
    drawVector = true;
    pos = new PVector(x, y);
    vel = new PVector(0, 0);
    nextAccel = new PVector(0, 0);
  }
  
  public void display(){
    stroke(0);
    strokeWeight(1);
    fill(orbColor);
    circle(pos.x, pos.y, psize);
    if(drawVector){
      stroke(0);
      strokeWeight(5);
      line(pos.x, pos.y, pos.x + vel.x * VECTOR_SIZE , pos.y + vel.y * VECTOR_SIZE);
    }
  }

  public float getY(){
    return pos.y;
  }

  public float getX(){
    return pos.x;
  }
  
  public void setSize(float psize){
    this.psize = psize;
  }

  public void setColor(int c){
    orbColor = c;
  }

  public void drawVector(boolean b){
    drawVector = b;
  }

  public void applyForce(PVector f){
    nextAccel.add(f);
  }
  
  public boolean checkInXBound(){
    return pos.x >= psize / 2f && pos.x <= width - psize / 2f; 
  }
  
  public boolean checkInYBound(){
    return pos.y >= psize / 2f && pos.y <= height - psize / 2f; 
  }

  public PVector calculateSpringForceY(Orb other){
    //f = kx, x is displacement from rest length, k is spring constant
    PVector force = new PVector(0, -SPRING_CONST * (SPRING_LENGTH - abs(other.getY() - pos.y)));
    if(other.getY() < pos.y) force.mult(-1);
    return force;
  }
  
  public void run(){
    vel.add(nextAccel);
    if(!checkInXBound()){
      if(pos.x < psize / 2f) pos.x += 5;
      if(pos.x > width - psize / 2f) pos.x -= 5;;
      vel.x = -vel.x;
    } 
    if(!checkInYBound()){
      if(pos.y < psize / 2f) pos.y += 5;
      if(pos.y > width - psize / 2f) pos.y -= 5;
      vel.y = -vel.y;
    }
    vel.mult(AIR_DAMPING);
    pos.add(vel);
    nextAccel = new PVector(0, 0);
  }
}


  public void settings() { size(800, 400); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "OrbitalMotion" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
