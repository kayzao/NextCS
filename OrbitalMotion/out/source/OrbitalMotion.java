/* autogenerated by Processing revision 1282 on 2022-04-28 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class OrbitalMotion extends PApplet {

float GRAVITY = 0.1f;

OrbNode orbs[] = new OrbNode[3];
PVector g;

boolean moving;

 public void setup() {
  /* size commented out by preprocessor */;
  g = new PVector(0, GRAVITY);
  println("==========================================================================================");
  println("SPACE to enable/disable movement, H to apply force based on mouse position, and R to reset");
  println("==========================================================================================");
  reset();
}

 public void reset() {
  moving = false;
  int x = width / 2 - 50;
  int y = 100;
  for(int i = 0; i < orbs.length; i++){
    orbs[i] = new OrbNode(x, y);
    x += 100;
    orbs[i].setColor(255);
  }
  orbs[1].connectNext(orbs[2]);
  orbs[1].connectPrev(orbs[0]);
  orbs[2].connectPrev(orbs[1]);
}


 public void draw() {
  background(255);
  fill(255);
  strokeWeight(1);
  if (moving) {
    runAStep();
  }
  for(OrbNode o : orbs) o.display();
  strokeWeight(1);
  fill(255, 0, 0, 100); 
}

 public void runAStep() {
  orbs[1].applySpringForce();
  orbs[1].applyForce(g);
  orbs[2].applySpringForce();
  orbs[2].applyForce(g);
  orbs[1].run();
  orbs[2].run();
}

 public void keyPressed() {
  if (key == ' ') {
    moving = !moving;
  }
  
  if (key == 'h') {
    moving = true;
    orbs[2].applyForce(new PVector((mouseX - orbs[2].getPos().x) * 0.01f, (mouseY - orbs[2].getPos().y) * 0.01f));
    //orbs[1].applyForce(new PVector((mouseX - orbs[1].getPos().x) * 0.01, (mouseY - orbs[1].getPos().y) * 0.01));
  }

  if (key == 'r') {
    reset();
  }
}
class OrbNode {
  private PVector pos, vel, nextAccel; //acceleration for the next tick
  private float psize;
  private int orbColor;
  private boolean drawVector;
  private OrbNode next, prev;
  static final float SPRING_LENGTH = 50, SPRING_CONST = 0.005f, AIR_DAMPING = 0.995f, VECTOR_SIZE = 3;

  public OrbNode(int x, int y){
    if(psize == 0) psize = 20;
    drawVector = true;
    pos = new PVector(x, y);
    vel = new PVector(0, 0);
    nextAccel = new PVector(0, 0);
    next = null;
    prev = null;
  }
  
  public void display(){
    stroke(0);
    strokeWeight(1);
    fill(orbColor);
    circle(pos.x, pos.y, psize);
    if(drawVector){
      stroke(0);
      strokeWeight(5);
      line(pos.x, pos.y, pos.x + vel.x * VECTOR_SIZE , pos.y + vel.y * VECTOR_SIZE);
    }
    if(next != null){
      stroke(0, 255, 255);
      strokeWeight(2);
      line(pos.x + 5, pos.y + 5, next.getPos().x + 5, next.getPos().y + 5);
    }
    if(prev != null){
      stroke(255, 0, 0);
      strokeWeight(2);
      line(pos.x, pos.y, prev.getPos().x, prev.getPos().y);
    }
  }

  public PVector getPos(){
    return pos;
  }
  
  public void setSize(float psize){
    this.psize = psize;
  }

  public void setColor(int c){
    orbColor = c;
  }

  public void drawVector(boolean b){
    drawVector = b;
  }
  
  public void connectNext(OrbNode next){
    this.next = next;
  }
  
  public void connectPrev(OrbNode prev){
    this.prev = prev;
  }

  public void applyForce(PVector f){
    nextAccel.add(f);
  }
  
  public boolean checkInXBound(){
    return pos.x >= psize / 2f && pos.x <= width - psize / 2f; 
  }
  
  public boolean checkInYBound(){
    return pos.y >= psize / 2f && pos.y <= height - psize / 2f; 
  }
  
  public void applySpringForce(){
    if(next != null) this.applyForce(calculateSpringForce(next));
    if(prev != null) this.applyForce(calculateSpringForce(prev));
  }

  private PVector calculateSpringForce(OrbNode other){
    float displacement = -(pos.dist(other.getPos()) - SPRING_LENGTH);
    PVector force = new PVector(other.getPos().x - pos.x, other.getPos().y - pos.y);
    force.setMag(-SPRING_CONST * displacement);
    return force;
  }
  
  public void run(){
    vel.add(nextAccel);
    if(!checkInXBound()){
      if(pos.x < psize / 2f) pos.x = psize / 2f;
      if(pos.x > width - psize / 2f) pos.x = width - psize / 2f;
      vel.x = -vel.x;
    } 
    if(!checkInYBound()){
      if(pos.y < psize / 2f) pos.y = psize / 2f;
      if(pos.y > height - psize / 2f) pos.y = height - psize / 2f;
      vel.y = -vel.y;
    }
    vel.mult(AIR_DAMPING);
    pos.add(vel);
    nextAccel = new PVector(0, 0);
  }
}


  public void settings() { size(800, 400); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "OrbitalMotion" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
